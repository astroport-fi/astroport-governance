{
  "contract_name": "builder-unlock",
  "contract_version": "3.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "astro_denom",
      "max_allocations_amount",
      "owner"
    ],
    "properties": {
      "astro_denom": {
        "description": "ASTRO token denom",
        "type": "string"
      },
      "max_allocations_amount": {
        "description": "Max ASTRO tokens to allocate",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "owner": {
        "description": "Account that can create new allocations",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "This enum describes all the execute functions available in the contract.",
    "oneOf": [
      {
        "description": "CreateAllocations creates new ASTRO allocations",
        "type": "object",
        "required": [
          "create_allocations"
        ],
        "properties": {
          "create_allocations": {
            "type": "object",
            "required": [
              "allocations"
            ],
            "properties": {
              "allocations": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/CreateAllocationParams"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw claims withdrawable ASTRO",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ProposeNewReceiver allows a user to change the receiver address for their ASTRO allocation",
        "type": "object",
        "required": [
          "propose_new_receiver"
        ],
        "properties": {
          "propose_new_receiver": {
            "type": "object",
            "required": [
              "new_receiver"
            ],
            "properties": {
              "new_receiver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "DropNewReceiver allows a user to remove the previously proposed new receiver for their ASTRO allocation",
        "type": "object",
        "required": [
          "drop_new_receiver"
        ],
        "properties": {
          "drop_new_receiver": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ClaimReceiver allows newly proposed receivers to claim ASTRO allocations ownership",
        "type": "object",
        "required": [
          "claim_receiver"
        ],
        "properties": {
          "claim_receiver": {
            "type": "object",
            "required": [
              "prev_receiver"
            ],
            "properties": {
              "prev_receiver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Increase the ASTRO allocation of a receiver",
        "type": "object",
        "required": [
          "increase_allocation"
        ],
        "properties": {
          "increase_allocation": {
            "type": "object",
            "required": [
              "amount",
              "receiver"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "receiver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Decrease the ASTRO allocation of a receiver",
        "type": "object",
        "required": [
          "decrease_allocation"
        ],
        "properties": {
          "decrease_allocation": {
            "type": "object",
            "required": [
              "amount",
              "receiver"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "receiver": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Transfer unallocated tokens (only accessible to the owner)",
        "type": "object",
        "required": [
          "transfer_unallocated"
        ],
        "properties": {
          "transfer_unallocated": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Propose a new owner for the contract",
        "type": "object",
        "required": [
          "propose_new_owner"
        ],
        "properties": {
          "propose_new_owner": {
            "type": "object",
            "required": [
              "expires_in",
              "new_owner"
            ],
            "properties": {
              "expires_in": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "new_owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove the ownership transfer proposal",
        "type": "object",
        "required": [
          "drop_ownership_proposal"
        ],
        "properties": {
          "drop_ownership_proposal": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim contract ownership",
        "type": "object",
        "required": [
          "claim_ownership"
        ],
        "properties": {
          "claim_ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update parameters in the contract configuration",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "required": [
              "new_max_allocations_amount"
            ],
            "properties": {
              "new_max_allocations_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update a schedule of allocation for specified accounts",
        "type": "object",
        "required": [
          "update_unlock_schedules"
        ],
        "properties": {
          "update_unlock_schedules": {
            "type": "object",
            "required": [
              "new_unlock_schedules"
            ],
            "properties": {
              "new_unlock_schedules": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Schedule"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "CreateAllocationParams": {
        "description": "This structure stores the parameters used to describe an ASTRO allocation.",
        "type": "object",
        "required": [
          "amount",
          "unlock_schedule"
        ],
        "properties": {
          "amount": {
            "description": "Total amount of ASTRO tokens allocated to a specific account",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "unlock_schedule": {
            "description": "Parameters controlling the unlocking process",
            "allOf": [
              {
                "$ref": "#/definitions/Schedule"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Schedule": {
        "description": "This structure stores the parameters describing a typical unlock schedule.",
        "type": "object",
        "required": [
          "cliff",
          "duration",
          "start_time"
        ],
        "properties": {
          "cliff": {
            "description": "Cliff period during which no tokens can be withdrawn out of the contract",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "duration": {
            "description": "Time after the cliff during which the remaining tokens linearly unlock",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "percent_at_cliff": {
            "description": "Percentage of tokens unlocked at the cliff",
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_time": {
            "description": "Timestamp for the start of the unlock schedule (in seconds)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "This enum describes all the queries available in the contract.",
    "oneOf": [
      {
        "description": "Config returns the configuration for this contract",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "State returns the state of this contract",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "properties": {
              "timestamp": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allocation returns the parameters and current status of an allocation",
        "type": "object",
        "required": [
          "allocation"
        ],
        "properties": {
          "allocation": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "description": "Account whose allocation status we query",
                "type": "string"
              },
              "timestamp": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allocations returns a vector that contains builder unlock allocations by specified parameters",
        "type": "object",
        "required": [
          "allocations"
        ],
        "properties": {
          "allocations": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "UnlockedTokens returns the unlocked tokens from an allocation",
        "type": "object",
        "required": [
          "unlocked_tokens"
        ],
        "properties": {
          "unlocked_tokens": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "description": "Account whose amount of unlocked ASTRO we query for",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "SimulateWithdraw simulates how many ASTRO will be released if a withdrawal is attempted",
        "type": "object",
        "required": [
          "simulate_withdraw"
        ],
        "properties": {
          "simulate_withdraw": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "description": "Account for which we simulate a withdrawal",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp used to simulate how much ASTRO the account can withdraw",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "allocation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllocationResponse",
      "description": "This structure stores the parameters used to return the response when querying for an allocation data.",
      "type": "object",
      "required": [
        "params",
        "status"
      ],
      "properties": {
        "params": {
          "description": "The allocation parameters",
          "allOf": [
            {
              "$ref": "#/definitions/AllocationParams"
            }
          ]
        },
        "status": {
          "description": "The allocation status",
          "allOf": [
            {
              "$ref": "#/definitions/AllocationStatus"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AllocationParams": {
          "type": "object",
          "required": [
            "unlock_schedule"
          ],
          "properties": {
            "proposed_receiver": {
              "description": "Proposed new receiver who will get the ASTRO allocation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unlock_schedule": {
              "description": "Parameters controlling the unlocking process",
              "allOf": [
                {
                  "$ref": "#/definitions/Schedule"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AllocationStatus": {
          "description": "This structure stores the parameters used to describe the status of an allocation.",
          "type": "object",
          "required": [
            "amount",
            "astro_withdrawn",
            "unlocked_amount_checkpoint"
          ],
          "properties": {
            "amount": {
              "description": "Total amount of ASTRO tokens allocated to a specific account",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "astro_withdrawn": {
              "description": "Amount of ASTRO already withdrawn",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "unlocked_amount_checkpoint": {
              "description": "Already unlocked amount after decreasing",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Schedule": {
          "description": "This structure stores the parameters describing a typical unlock schedule.",
          "type": "object",
          "required": [
            "cliff",
            "duration",
            "start_time"
          ],
          "properties": {
            "cliff": {
              "description": "Cliff period during which no tokens can be withdrawn out of the contract",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "duration": {
              "description": "Time after the cliff during which the remaining tokens linearly unlock",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "percent_at_cliff": {
              "description": "Percentage of tokens unlocked at the cliff",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_time": {
              "description": "Timestamp for the start of the unlock schedule (in seconds)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "allocations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_Tuple_of_String_and_AllocationParams",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "$ref": "#/definitions/AllocationParams"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AllocationParams": {
          "type": "object",
          "required": [
            "unlock_schedule"
          ],
          "properties": {
            "proposed_receiver": {
              "description": "Proposed new receiver who will get the ASTRO allocation",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unlock_schedule": {
              "description": "Parameters controlling the unlocking process",
              "allOf": [
                {
                  "$ref": "#/definitions/Schedule"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Schedule": {
          "description": "This structure stores the parameters describing a typical unlock schedule.",
          "type": "object",
          "required": [
            "cliff",
            "duration",
            "start_time"
          ],
          "properties": {
            "cliff": {
              "description": "Cliff period during which no tokens can be withdrawn out of the contract",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "duration": {
              "description": "Time after the cliff during which the remaining tokens linearly unlock",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "percent_at_cliff": {
              "description": "Percentage of tokens unlocked at the cliff",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_time": {
              "description": "Timestamp for the start of the unlock schedule (in seconds)",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "This structure stores general parameters for the builder unlock contract.",
      "type": "object",
      "required": [
        "astro_denom",
        "max_allocations_amount",
        "owner"
      ],
      "properties": {
        "astro_denom": {
          "description": "ASTRO token denom",
          "type": "string"
        },
        "max_allocations_amount": {
          "description": "Max ASTRO tokens to allocate",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "owner": {
          "description": "Account that can create new unlock schedules",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulate_withdraw": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulateWithdrawResponse",
      "description": "This structure stores the parameters used to return a response when simulating a withdrawal.",
      "type": "object",
      "required": [
        "astro_to_withdraw"
      ],
      "properties": {
        "astro_to_withdraw": {
          "description": "Amount of ASTRO to receive",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "State",
      "description": "This structure stores the total and the remaining amount of ASTRO to be unlocked by all accounts.",
      "type": "object",
      "required": [
        "remaining_astro_tokens",
        "total_astro_deposited",
        "unallocated_astro_tokens"
      ],
      "properties": {
        "remaining_astro_tokens": {
          "description": "Currently available ASTRO tokens that still need to be unlocked and/or withdrawn",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_astro_deposited": {
          "description": "Amount of ASTRO tokens deposited into the contract",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unallocated_astro_tokens": {
          "description": "Amount of ASTRO tokens deposited into the contract but not assigned to an allocation",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "unlocked_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
