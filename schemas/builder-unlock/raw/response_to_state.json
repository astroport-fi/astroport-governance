{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "State",
  "description": "This structure stores the total and the remaining amount of ASTRO to be unlocked by all accounts.",
  "type": "object",
  "required": [
    "remaining_astro_tokens",
    "total_astro_deposited",
    "unallocated_astro_tokens"
  ],
  "properties": {
    "remaining_astro_tokens": {
      "description": "Currently available ASTRO tokens that still need to be unlocked and/or withdrawn",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "total_astro_deposited": {
      "description": "Amount of ASTRO tokens deposited into the contract",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "unallocated_astro_tokens": {
      "description": "Amount of ASTRO tokens deposited into the contract but not assigned to an allocation",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
