{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllocationResponse",
  "description": "This structure stores the parameters used to return the response when querying for an allocation data.",
  "type": "object",
  "required": [
    "params",
    "status"
  ],
  "properties": {
    "params": {
      "description": "The allocation parameters",
      "allOf": [
        {
          "$ref": "#/definitions/AllocationParams"
        }
      ]
    },
    "status": {
      "description": "The allocation status",
      "allOf": [
        {
          "$ref": "#/definitions/AllocationStatus"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AllocationParams": {
      "type": "object",
      "required": [
        "unlock_schedule"
      ],
      "properties": {
        "proposed_receiver": {
          "description": "Proposed new receiver who will get the ASTRO allocation",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "unlock_schedule": {
          "description": "Parameters controlling the unlocking process",
          "allOf": [
            {
              "$ref": "#/definitions/Schedule"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AllocationStatus": {
      "description": "This structure stores the parameters used to describe the status of an allocation.",
      "type": "object",
      "required": [
        "amount",
        "astro_withdrawn",
        "unlocked_amount_checkpoint"
      ],
      "properties": {
        "amount": {
          "description": "Total amount of ASTRO tokens allocated to a specific account",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "astro_withdrawn": {
          "description": "Amount of ASTRO already withdrawn",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlocked_amount_checkpoint": {
          "description": "Already unlocked amount after decreasing",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Schedule": {
      "description": "This structure stores the parameters describing a typical unlock schedule.",
      "type": "object",
      "required": [
        "cliff",
        "duration",
        "start_time"
      ],
      "properties": {
        "cliff": {
          "description": "Cliff period during which no tokens can be withdrawn out of the contract",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "duration": {
          "description": "Time after the cliff during which the remaining tokens linearly unlock",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "percent_at_cliff": {
          "description": "Percentage of tokens unlocked at the cliff",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_time": {
          "description": "Timestamp for the start of the unlock schedule (in seconds)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
