{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This enum describes all the execute functions available in the contract.",
  "oneOf": [
    {
      "description": "CreateAllocations creates new ASTRO allocations",
      "type": "object",
      "required": [
        "create_allocations"
      ],
      "properties": {
        "create_allocations": {
          "type": "object",
          "required": [
            "allocations"
          ],
          "properties": {
            "allocations": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/CreateAllocationParams"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw claims withdrawable ASTRO",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewReceiver allows a user to change the receiver address for their ASTRO allocation",
      "type": "object",
      "required": [
        "propose_new_receiver"
      ],
      "properties": {
        "propose_new_receiver": {
          "type": "object",
          "required": [
            "new_receiver"
          ],
          "properties": {
            "new_receiver": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropNewReceiver allows a user to remove the previously proposed new receiver for their ASTRO allocation",
      "type": "object",
      "required": [
        "drop_new_receiver"
      ],
      "properties": {
        "drop_new_receiver": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ClaimReceiver allows newly proposed receivers to claim ASTRO allocations ownership",
      "type": "object",
      "required": [
        "claim_receiver"
      ],
      "properties": {
        "claim_receiver": {
          "type": "object",
          "required": [
            "prev_receiver"
          ],
          "properties": {
            "prev_receiver": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Increase the ASTRO allocation of a receiver",
      "type": "object",
      "required": [
        "increase_allocation"
      ],
      "properties": {
        "increase_allocation": {
          "type": "object",
          "required": [
            "amount",
            "receiver"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "receiver": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Decrease the ASTRO allocation of a receiver",
      "type": "object",
      "required": [
        "decrease_allocation"
      ],
      "properties": {
        "decrease_allocation": {
          "type": "object",
          "required": [
            "amount",
            "receiver"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "receiver": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfer unallocated tokens (only accessible to the owner)",
      "type": "object",
      "required": [
        "transfer_unallocated"
      ],
      "properties": {
        "transfer_unallocated": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Propose a new owner for the contract",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "new_owner"
          ],
          "properties": {
            "expires_in": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "new_owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove the ownership transfer proposal",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update parameters in the contract configuration",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_max_allocations_amount"
          ],
          "properties": {
            "new_max_allocations_amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update a schedule of allocation for specified accounts",
      "type": "object",
      "required": [
        "update_unlock_schedules"
      ],
      "properties": {
        "update_unlock_schedules": {
          "type": "object",
          "required": [
            "new_unlock_schedules"
          ],
          "properties": {
            "new_unlock_schedules": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Schedule"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "CreateAllocationParams": {
      "description": "This structure stores the parameters used to describe an ASTRO allocation.",
      "type": "object",
      "required": [
        "amount",
        "unlock_schedule"
      ],
      "properties": {
        "amount": {
          "description": "Total amount of ASTRO tokens allocated to a specific account",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlock_schedule": {
          "description": "Parameters controlling the unlocking process",
          "allOf": [
            {
              "$ref": "#/definitions/Schedule"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Schedule": {
      "description": "This structure stores the parameters describing a typical unlock schedule.",
      "type": "object",
      "required": [
        "cliff",
        "duration",
        "start_time"
      ],
      "properties": {
        "cliff": {
          "description": "Cliff period during which no tokens can be withdrawn out of the contract",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "duration": {
          "description": "Time after the cliff during which the remaining tokens linearly unlock",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "percent_at_cliff": {
          "description": "Percentage of tokens unlocked at the cliff",
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_time": {
          "description": "Timestamp for the start of the unlock schedule (in seconds)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
