{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "General contract configuration",
  "type": "object",
  "required": [
    "astro_denom",
    "factory",
    "fee_receiver",
    "owner",
    "pools_per_outpost",
    "vxastro",
    "whitelist_threshold",
    "whitelisting_fee"
  ],
  "properties": {
    "astro_denom": {
      "description": "ASTRO denom on the Hub",
      "type": "string"
    },
    "factory": {
      "description": "Astroport Factory contract",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "fee_receiver": {
      "description": "Address that receives the whitelisting fee",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "owner": {
      "description": "Address that's allowed to change contract parameters",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "pools_per_outpost": {
      "description": "Max number of pools that can receive ASTRO emissions per outpost added. For example, if there are 3 outposts, and the pools_limit is 10, then 30 pools can receive ASTRO emissions. This limit doesn't enforce the exact number of pools per outpost, but adds flexibility to the contract to automatically adjust the max number of pools based on the number of outposts.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vxastro": {
      "description": "vxASTRO contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "whitelist_threshold": {
      "description": "Minimal percentage of total voting power required to keep a pool in the whitelist",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "whitelisting_fee": {
      "description": "Fee required to whitelist a pool",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
