{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Vote allows a vxASTRO holders to cast votes on which pools should get ASTRO emissions in the next epoch",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "vote": {
          "type": "object",
          "required": [
            "votes"
          ],
          "properties": {
            "votes": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only vxASTRO contract can call this endpoint. Updates user votes according to the current voting power.",
      "type": "object",
      "required": [
        "update_user_votes"
      ],
      "properties": {
        "update_user_votes": {
          "type": "object",
          "required": [
            "is_unlock",
            "user"
          ],
          "properties": {
            "is_unlock": {
              "type": "boolean"
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissionless endpoint which allows user to update their voting power contribution in case of IBC failures or pool has been re-added to whitelist.",
      "type": "object",
      "required": [
        "refresh_user_votes"
      ],
      "properties": {
        "refresh_user_votes": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner proposes a new owner for the contract",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "new_owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The timestamp when the contract ownership change expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "new_owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the latest contract ownership transfer proposal",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ClaimOwnership allows the newly proposed owner to claim contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set of endpoints specific for Hub/Outpost",
      "type": "object",
      "required": [
        "custom"
      ],
      "properties": {
        "custom": {
          "$ref": "#/definitions/HubMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AstroPoolConfig": {
      "type": "object",
      "required": [
        "astro_pool",
        "constant_emissions"
      ],
      "properties": {
        "astro_pool": {
          "description": "The most liquid ASTRO pool on this outpost",
          "type": "string"
        },
        "constant_emissions": {
          "description": "The constant ASTRO pool emissions. Can be set to 0 if emissions are not needed.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "HubMsg": {
      "oneOf": [
        {
          "description": "TunePools transforms the latest vote distribution into alloc_points which turn into ASTRO emissions",
          "type": "object",
          "required": [
            "tune_pools"
          ],
          "properties": {
            "tune_pools": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Repeats IBC transfer messages with IBC hook for all outposts in Failed state.",
          "type": "object",
          "required": [
            "retry_failed_outposts"
          ],
          "properties": {
            "retry_failed_outposts": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update the contract configuration",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "fee_receiver": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "pools_per_outpost": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "whitelisting_fee": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Whitelists a pool to receive ASTRO emissions. Requires fee payment",
          "type": "object",
          "required": [
            "whitelist_pool"
          ],
          "properties": {
            "whitelist_pool": {
              "type": "object",
              "required": [
                "pool"
              ],
              "properties": {
                "pool": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Register or update an outpost",
          "type": "object",
          "required": [
            "update_outpost"
          ],
          "properties": {
            "update_outpost": {
              "type": "object",
              "required": [
                "astro_denom",
                "prefix"
              ],
              "properties": {
                "astro_denom": {
                  "description": "Astro denom on this outpost",
                  "type": "string"
                },
                "astro_pool_config": {
                  "description": "A pool that must receive flat ASTRO emissions. Optional.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AstroPoolConfig"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "outpost_params": {
                  "description": "Outpost params contain all necessary information to interact with the remote outpost. This field also serves as marker whether it is The hub (params: None) or remote outpost (Some(params))",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/OutpostParams"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "prefix": {
                  "description": "Bech32 prefix",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Remove an outpost",
          "type": "object",
          "required": [
            "remove_outpost"
          ],
          "properties": {
            "remove_outpost": {
              "type": "object",
              "required": [
                "prefix"
              ],
              "properties": {
                "prefix": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OutpostParams": {
      "type": "object",
      "required": [
        "emissions_controller",
        "ics20_channel",
        "voting_channel"
      ],
      "properties": {
        "emissions_controller": {
          "description": "Emissions controller on a given outpost",
          "type": "string"
        },
        "ics20_channel": {
          "description": "General IBC channel for fungible token transfers",
          "type": "string"
        },
        "voting_channel": {
          "description": "wasm<>wasm IBC channel for voting",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
