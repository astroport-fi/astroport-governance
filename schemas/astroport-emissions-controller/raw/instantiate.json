{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure describes the basic settings for creating a contract.",
  "type": "object",
  "required": [
    "assembly",
    "astro_denom",
    "collected_astro",
    "emissions_multiple",
    "factory",
    "fee_receiver",
    "max_astro",
    "owner",
    "pools_per_outpost",
    "vxastro_code_id",
    "whitelist_threshold",
    "whitelisting_fee",
    "xastro_denom"
  ],
  "properties": {
    "assembly": {
      "description": "Astroport Assembly contract address",
      "type": "string"
    },
    "astro_denom": {
      "description": "ASTRO denom on the Hub",
      "type": "string"
    },
    "collected_astro": {
      "description": "Defines the number of ASTRO collected to staking contract from 2-weeks period preceding the current epoch.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "emissions_multiple": {
      "description": "Controls ASTRO emissions for the next epoch. If multiple < 1 then protocol emits less ASTRO than it buys back, otherwise protocol is inflating ASTRO supply.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "factory": {
      "description": "Astroport Factory contract",
      "type": "string"
    },
    "fee_receiver": {
      "description": "Address that receives the whitelisting fee",
      "type": "string"
    },
    "max_astro": {
      "description": "Max ASTRO allowed per epoch. Parameter of the dynamic emissions curve.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "owner": {
      "description": "Contract owner",
      "type": "string"
    },
    "pools_per_outpost": {
      "description": "Max number of pools that can receive ASTRO emissions per outpost added. For example, if there are 3 outposts, and the pools_limit is 10, then 30 pools can receive ASTRO emissions. This limit doesn't enforce the exact number of pools per outpost, but adds flexibility to the contract to automatically adjust the max number of pools based on the number of outposts.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vxastro_code_id": {
      "description": "vxASTRO contract code id",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vxastro_marketing_info": {
      "description": "vxASTRO token marketing info",
      "anyOf": [
        {
          "$ref": "#/definitions/UpdateMarketingInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "whitelist_threshold": {
      "description": "Minimal percentage of total voting power required to keep a pool in the whitelist",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "whitelisting_fee": {
      "description": "Fee required to whitelist a pool",
      "allOf": [
        {
          "$ref": "#/definitions/Coin"
        }
      ]
    },
    "xastro_denom": {
      "description": "xASTRO denom",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EmbeddedLogo": {
      "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
      "oneOf": [
        {
          "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
          "type": "object",
          "required": [
            "svg"
          ],
          "properties": {
            "svg": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
          "type": "object",
          "required": [
            "png"
          ],
          "properties": {
            "png": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Logo": {
      "description": "This is used for uploading logo data, or setting it in InstantiateData",
      "oneOf": [
        {
          "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
          "type": "object",
          "required": [
            "url"
          ],
          "properties": {
            "url": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
          "type": "object",
          "required": [
            "embedded"
          ],
          "properties": {
            "embedded": {
              "$ref": "#/definitions/EmbeddedLogo"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateMarketingInfo": {
      "description": "This structure stores marketing information for vxASTRO.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Token description",
          "type": [
            "string",
            "null"
          ]
        },
        "logo": {
          "description": "Token logo",
          "anyOf": [
            {
              "$ref": "#/definitions/Logo"
            },
            {
              "type": "null"
            }
          ]
        },
        "marketing": {
          "description": "Token marketing information",
          "type": [
            "string",
            "null"
          ]
        },
        "project": {
          "description": "Project URL",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
