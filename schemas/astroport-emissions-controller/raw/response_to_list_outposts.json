{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_Tuple_of_String_and_OutpostInfo",
  "type": "array",
  "items": {
    "type": "array",
    "items": [
      {
        "type": "string"
      },
      {
        "$ref": "#/definitions/OutpostInfo"
      }
    ],
    "maxItems": 2,
    "minItems": 2
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AstroPoolConfig": {
      "description": "Each outpost may have one pool that receives flat ASTRO emissions. This pools doesn't participate in the voting process.",
      "type": "object",
      "required": [
        "astro_pool",
        "constant_emissions"
      ],
      "properties": {
        "astro_pool": {
          "description": "Pool with ASTRO which needs to receive flat emissions",
          "type": "string"
        },
        "constant_emissions": {
          "description": "Amount of ASTRO per epoch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OutpostInfo": {
      "type": "object",
      "required": [
        "astro_denom",
        "jailed"
      ],
      "properties": {
        "astro_denom": {
          "description": "ASTRO token denom",
          "type": "string"
        },
        "astro_pool_config": {
          "description": "A pool that must receive flat ASTRO emissions. Optional.",
          "anyOf": [
            {
              "$ref": "#/definitions/AstroPoolConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "jailed": {
          "description": "Defines whether outpost is jailed. Jailed outposts can't participate in the voting process, but they still allow remote users to unstake their vxASTRO.",
          "type": "boolean"
        },
        "params": {
          "description": "Outpost params contain all necessary information to interact with the remote outpost. This field also serves as marker whether it is The hub (params: None) or remote outpost (Some(params))",
          "anyOf": [
            {
              "$ref": "#/definitions/OutpostParams"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OutpostParams": {
      "type": "object",
      "required": [
        "emissions_controller",
        "escrow_address",
        "ics20_channel",
        "voting_channel"
      ],
      "properties": {
        "emissions_controller": {
          "description": "Emissions controller on a given outpost",
          "type": "string"
        },
        "escrow_address": {
          "description": "ICS20 transfer escrow address on Neutron. Calculated automatically based on channel id",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "ics20_channel": {
          "description": "General IBC channel for fungible token transfers",
          "type": "string"
        },
        "voting_channel": {
          "description": "wasm<>wasm IBC channel for voting",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
