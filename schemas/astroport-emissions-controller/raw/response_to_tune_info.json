{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TuneInfo",
  "type": "object",
  "required": [
    "emissions_state",
    "outpost_emissions_statuses",
    "pools_grouped",
    "tune_ts"
  ],
  "properties": {
    "emissions_state": {
      "description": "State of the dynamic emissions curve",
      "allOf": [
        {
          "$ref": "#/definitions/EmissionsState"
        }
      ]
    },
    "outpost_emissions_statuses": {
      "description": "Map of outpost prefix -> IBC status. Hub should never enter this map.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/OutpostStatus"
      }
    },
    "pools_grouped": {
      "description": "Map of outpost prefix -> array of pools with their emissions",
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/Uint128"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      }
    },
    "tune_ts": {
      "description": "Last time when the tune was executed. Matches epoch start i.e., Monday 00:00 UTC every 2 weeks",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EmissionsState": {
      "type": "object",
      "required": [
        "collected_astro",
        "ema",
        "emissions_amount",
        "xastro_rate"
      ],
      "properties": {
        "collected_astro": {
          "description": "Collected ASTRO from previous epoch.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "ema": {
          "description": "EMA of the collected ASTRO from the previous epoch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "emissions_amount": {
          "description": "Amount of ASTRO to be emitted in the current epoch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "xastro_rate": {
          "description": "xASTRO to ASTRO staking rate from the previous epoch",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "OutpostStatus": {
      "type": "string",
      "enum": [
        "in_progress",
        "failed",
        "done"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
