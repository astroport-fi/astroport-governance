{
  "contract_name": "astroport-emissions-controller-outpost",
  "contract_version": "1.3.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "This structure describes the basic settings for creating a contract.",
    "type": "object",
    "required": [
      "astro_denom",
      "factory",
      "hub_emissions_controller",
      "ics20_channel",
      "owner",
      "vxastro_code_id",
      "vxastro_marketing_info",
      "xastro_denom"
    ],
    "properties": {
      "astro_denom": {
        "description": "ASTRO denom on the chain",
        "type": "string"
      },
      "factory": {
        "description": "Astroport Factory contract",
        "type": "string"
      },
      "hub_emissions_controller": {
        "description": "Emissions controller on the Hub",
        "type": "string"
      },
      "ics20_channel": {
        "description": "Official ICS20 IBC channel from this outpost to the Hub",
        "type": "string"
      },
      "owner": {
        "description": "Contract owner",
        "type": "string"
      },
      "vxastro_code_id": {
        "description": "vxASTRO contract code id",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "vxastro_marketing_info": {
        "description": "vxASTRO token marketing info",
        "allOf": [
          {
            "$ref": "#/definitions/UpdateMarketingInfo"
          }
        ]
      },
      "xastro_denom": {
        "description": "xASTRO denom",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "EmbeddedLogo": {
        "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
        "oneOf": [
          {
            "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
            "type": "object",
            "required": [
              "svg"
            ],
            "properties": {
              "svg": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
            "type": "object",
            "required": [
              "png"
            ],
            "properties": {
              "png": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Logo": {
        "description": "This is used for uploading logo data, or setting it in InstantiateData",
        "oneOf": [
          {
            "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
            "type": "object",
            "required": [
              "embedded"
            ],
            "properties": {
              "embedded": {
                "$ref": "#/definitions/EmbeddedLogo"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UpdateMarketingInfo": {
        "description": "This structure stores marketing information for vxASTRO.",
        "type": "object",
        "required": [
          "logo"
        ],
        "properties": {
          "description": {
            "description": "Token description",
            "type": [
              "string",
              "null"
            ]
          },
          "logo": {
            "description": "Token logo",
            "allOf": [
              {
                "$ref": "#/definitions/Logo"
              }
            ]
          },
          "marketing": {
            "description": "Token marketing information",
            "type": [
              "string",
              "null"
            ]
          },
          "project": {
            "description": "Project URL",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Vote allows a vxASTRO holders to cast votes on which pools should get ASTRO emissions in the next epoch",
        "type": "object",
        "required": [
          "vote"
        ],
        "properties": {
          "vote": {
            "type": "object",
            "required": [
              "votes"
            ],
            "properties": {
              "votes": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Decimal"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Only vxASTRO contract can call this endpoint. Updates user votes according to the current voting power.",
        "type": "object",
        "required": [
          "update_user_votes"
        ],
        "properties": {
          "update_user_votes": {
            "type": "object",
            "required": [
              "is_unlock",
              "user"
            ],
            "properties": {
              "is_unlock": {
                "type": "boolean"
              },
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Permissionless endpoint which allows user to update their voting power contribution in case of IBC failures or if pool has been re-added to whitelist.",
        "type": "object",
        "required": [
          "refresh_user_votes"
        ],
        "properties": {
          "refresh_user_votes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ProposeNewOwner proposes a new owner for the contract",
        "type": "object",
        "required": [
          "propose_new_owner"
        ],
        "properties": {
          "propose_new_owner": {
            "type": "object",
            "required": [
              "expires_in",
              "new_owner"
            ],
            "properties": {
              "expires_in": {
                "description": "The timestamp when the contract ownership change expires",
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "new_owner": {
                "description": "Newly proposed contract owner",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "DropOwnershipProposal removes the latest contract ownership transfer proposal",
        "type": "object",
        "required": [
          "drop_ownership_proposal"
        ],
        "properties": {
          "drop_ownership_proposal": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ClaimOwnership allows the newly proposed owner to claim contract ownership",
        "type": "object",
        "required": [
          "claim_ownership"
        ],
        "properties": {
          "claim_ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set of endpoints specific for Hub/Outpost",
        "type": "object",
        "required": [
          "custom"
        ],
        "properties": {
          "custom": {
            "$ref": "#/definitions/OutpostMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Asset": {
        "description": "This enum describes a Terra asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "InputSchedule": {
        "type": "object",
        "required": [
          "duration_periods",
          "reward"
        ],
        "properties": {
          "duration_periods": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "reward": {
            "$ref": "#/definitions/Asset"
          }
        },
        "additionalProperties": false
      },
      "OutpostMsg": {
        "oneOf": [
          {
            "description": "SetEmissions is a permissionless endpoint that allows setting ASTRO emissions for the next epoch from the Hub by leveraging IBC hooks.",
            "type": "object",
            "required": [
              "set_emissions"
            ],
            "properties": {
              "set_emissions": {
                "type": "object",
                "required": [
                  "schedules"
                ],
                "properties": {
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/definitions/InputSchedule"
                        }
                      ],
                      "maxItems": 2,
                      "minItems": 2
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Same as SetEmissions but it allows using funds from contract balance (if available). This endpoint can be called only by contract owner. It is meant to be used in case of IBC hook wasn't triggered upon ics20 packet arrival, for example, if a chain doesn't support IBC hooks.",
            "type": "object",
            "required": [
              "permissioned_set_emissions"
            ],
            "properties": {
              "permissioned_set_emissions": {
                "type": "object",
                "required": [
                  "schedules"
                ],
                "properties": {
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "$ref": "#/definitions/InputSchedule"
                        }
                      ],
                      "maxItems": 2,
                      "minItems": 2
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Allows using vxASTRO voting power to vote on general DAO proposals. The contract requires a proposal with specific id to be registered via a special permissionless IBC message.",
            "type": "object",
            "required": [
              "cast_vote"
            ],
            "properties": {
              "cast_vote": {
                "type": "object",
                "required": [
                  "proposal_id",
                  "vote"
                ],
                "properties": {
                  "proposal_id": {
                    "description": "Proposal id",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vote": {
                    "description": "Vote option",
                    "allOf": [
                      {
                        "$ref": "#/definitions/ProposalVoteOption"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "hub_emissions_controller": {
                    "description": "Emissions controller on the Hub",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "ics20_channel": {
                    "description": "Official ICS20 IBC channel from this outpost to the Hub",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "voting_ibc_channel": {
                    "description": "Voting IBC wasm<>wasm channel",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ProposalVoteOption": {
        "description": "This enum describes available options for voting on a proposal.",
        "type": "string",
        "enum": [
          "for",
          "against"
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "This structure describes the query messages available in the contract.",
    "oneOf": [
      {
        "description": "Config returns the contract configuration",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "QueryUserIbcStatus returns the status of the user's IBC request. Whether they have a pending request or an error.",
        "type": "object",
        "required": [
          "query_user_ibc_status"
        ],
        "properties": {
          "query_user_ibc_status": {
            "type": "object",
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "QueryRegisteredProposals returns the list of registered proposals.",
        "type": "object",
        "required": [
          "query_registered_proposals"
        ],
        "properties": {
          "query_registered_proposals": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "QueryProposalVoters returns the list of voters for the proposal.",
        "type": "object",
        "required": [
          "query_proposal_voters"
        ],
        "properties": {
          "query_proposal_voters": {
            "type": "object",
            "required": [
              "proposal_id"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "proposal_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "description": "General contract configuration",
      "type": "object",
      "required": [
        "astro_denom",
        "factory",
        "hub_emissions_controller",
        "ics20_channel",
        "incentives_addr",
        "owner",
        "voting_ibc_channel",
        "vxastro"
      ],
      "properties": {
        "astro_denom": {
          "description": "ASTRO denom on the chain",
          "type": "string"
        },
        "factory": {
          "description": "Astroport Factory contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "hub_emissions_controller": {
          "description": "Emissions controller on the Hub",
          "type": "string"
        },
        "ics20_channel": {
          "description": "ICS20 IBC channel from this outpost to the Hub",
          "type": "string"
        },
        "incentives_addr": {
          "description": "The Astroport Incentives contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "owner": {
          "description": "Address that's allowed to change contract parameters",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "voting_ibc_channel": {
          "description": "vxASTRO IBC channel",
          "type": "string"
        },
        "vxastro": {
          "description": "vxASTRO contract address",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "query_proposal_voters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_String",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "query_registered_proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_RegisteredProposal",
      "type": "array",
      "items": {
        "$ref": "#/definitions/RegisteredProposal"
      },
      "definitions": {
        "RegisteredProposal": {
          "description": "Contains the proposal id and the start time. Used exclusively in query response.",
          "type": "object",
          "required": [
            "id",
            "start_time"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "query_user_ibc_status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserIbcStatus",
      "description": "Contains the pending IBC message or an error",
      "type": "object",
      "properties": {
        "error": {
          "anyOf": [
            {
              "$ref": "#/definitions/UserIbcError"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/VxAstroIbcMsg"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "ProposalVoteOption": {
          "description": "This enum describes available options for voting on a proposal.",
          "type": "string",
          "enum": [
            "for",
            "against"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserIbcError": {
          "description": "Contains failed IBC along with the error message",
          "type": "object",
          "required": [
            "err",
            "msg"
          ],
          "properties": {
            "err": {
              "type": "string"
            },
            "msg": {
              "$ref": "#/definitions/VxAstroIbcMsg"
            }
          },
          "additionalProperties": false
        },
        "VxAstroIbcMsg": {
          "description": "Internal IBC messages for hub and outposts interactions",
          "oneOf": [
            {
              "description": "Sender: Outpost",
              "type": "object",
              "required": [
                "emissions_vote"
              ],
              "properties": {
                "emissions_vote": {
                  "type": "object",
                  "required": [
                    "total_voting_power",
                    "voter",
                    "votes",
                    "voting_power"
                  ],
                  "properties": {
                    "total_voting_power": {
                      "description": "Current total voting power on this outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "voter": {
                      "type": "string"
                    },
                    "votes": {
                      "description": "Voting power distribution",
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/Decimal"
                      }
                    },
                    "voting_power": {
                      "description": "Actual voting power reported from outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sender: Outpost",
              "type": "object",
              "required": [
                "update_user_votes"
              ],
              "properties": {
                "update_user_votes": {
                  "type": "object",
                  "required": [
                    "is_unlock",
                    "total_voting_power",
                    "voter",
                    "voting_power"
                  ],
                  "properties": {
                    "is_unlock": {
                      "description": "Marker defines whether this packet was sent from vxASTRO unlock context",
                      "type": "boolean"
                    },
                    "total_voting_power": {
                      "description": "Current total voting power on this outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "voter": {
                      "type": "string"
                    },
                    "voting_power": {
                      "description": "Actual voting power reported from outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sender: Hub",
              "type": "object",
              "required": [
                "register_proposal"
              ],
              "properties": {
                "register_proposal": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "start_time"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "start_time": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Sender: Outpost",
              "type": "object",
              "required": [
                "governance_vote"
              ],
              "properties": {
                "governance_vote": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "total_voting_power",
                    "vote",
                    "voter",
                    "voting_power"
                  ],
                  "properties": {
                    "proposal_id": {
                      "description": "Proposal id",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "total_voting_power": {
                      "description": "Current total voting power on this outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    },
                    "vote": {
                      "description": "Vote option",
                      "allOf": [
                        {
                          "$ref": "#/definitions/ProposalVoteOption"
                        }
                      ]
                    },
                    "voter": {
                      "type": "string"
                    },
                    "voting_power": {
                      "description": "Actual voting power reported from outpost",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}
