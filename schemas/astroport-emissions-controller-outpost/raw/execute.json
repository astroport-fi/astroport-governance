{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Vote allows a vxASTRO holders to cast votes on which pools should get ASTRO emissions in the next epoch",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "vote": {
          "type": "object",
          "required": [
            "votes"
          ],
          "properties": {
            "votes": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only vxASTRO contract can call this endpoint. Updates user votes according to the current voting power.",
      "type": "object",
      "required": [
        "update_user_votes"
      ],
      "properties": {
        "update_user_votes": {
          "type": "object",
          "required": [
            "is_unlock",
            "user"
          ],
          "properties": {
            "is_unlock": {
              "type": "boolean"
            },
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissionless endpoint which allows user to update their voting power contribution in case of IBC failures or if pool has been re-added to whitelist.",
      "type": "object",
      "required": [
        "refresh_user_votes"
      ],
      "properties": {
        "refresh_user_votes": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner proposes a new owner for the contract",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "new_owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The timestamp when the contract ownership change expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "new_owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the latest contract ownership transfer proposal",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ClaimOwnership allows the newly proposed owner to claim contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set of endpoints specific for Hub/Outpost",
      "type": "object",
      "required": [
        "custom"
      ],
      "properties": {
        "custom": {
          "$ref": "#/definitions/OutpostMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InputSchedule": {
      "type": "object",
      "required": [
        "duration_periods",
        "reward"
      ],
      "properties": {
        "duration_periods": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reward": {
          "$ref": "#/definitions/Asset"
        }
      },
      "additionalProperties": false
    },
    "OutpostMsg": {
      "oneOf": [
        {
          "description": "SetEmissions is a permissionless endpoint that allows setting ASTRO emissions for the next epoch from the Hub by leveraging IBC hooks.",
          "type": "object",
          "required": [
            "set_emissions"
          ],
          "properties": {
            "set_emissions": {
              "type": "object",
              "required": [
                "schedules"
              ],
              "properties": {
                "schedules": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/definitions/InputSchedule"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Same as SetEmissions but it allows using funds from contract balance (if available). This endpoint can be called only by contract owner. It is meant to be used in case of IBC hook wasn't triggered upon ics20 packet arrival, for example, if a chain doesn't support IBC hooks.",
          "type": "object",
          "required": [
            "permissioned_set_emissions"
          ],
          "properties": {
            "permissioned_set_emissions": {
              "type": "object",
              "required": [
                "schedules"
              ],
              "properties": {
                "schedules": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "$ref": "#/definitions/InputSchedule"
                      }
                    ],
                    "maxItems": 2,
                    "minItems": 2
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Permissioned to the contract owner. Allows to clawback ASTRO tokens bridged but not yet used in schedules. ASTRO tokens are sent back to the Hub emissions controller.",
          "type": "object",
          "required": [
            "clawback_astro"
          ],
          "properties": {
            "clawback_astro": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Allows using vxASTRO voting power to vote on general DAO proposals. The contract requires a proposal with specific id to be registered via a special permissionless IBC message.",
          "type": "object",
          "required": [
            "cast_vote"
          ],
          "properties": {
            "cast_vote": {
              "type": "object",
              "required": [
                "proposal_id",
                "vote"
              ],
              "properties": {
                "proposal_id": {
                  "description": "Proposal id",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "description": "Vote option",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ProposalVoteOption"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "hub_emissions_controller": {
                  "description": "Emissions controller on the Hub",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "ics20_channel": {
                  "description": "Official ICS20 IBC channel from this outpost to the Hub",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "voting_ibc_channel": {
                  "description": "Voting IBC wasm<>wasm channel",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProposalVoteOption": {
      "description": "This enum describes available options for voting on a proposal.",
      "type": "string",
      "enum": [
        "for",
        "against"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
