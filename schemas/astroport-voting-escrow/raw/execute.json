{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "This structure describes the execute endpoints in the contract.",
  "oneOf": [
    {
      "description": "Create a vxASTRO position and lock xASTRO",
      "type": "object",
      "required": [
        "lock"
      ],
      "properties": {
        "lock": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unlock xASTRO from the vxASTRO contract",
      "type": "object",
      "required": [
        "unlock"
      ],
      "properties": {
        "unlock": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Instantly unlock xASTRO from the vxASTRO contract without waiting period. Only privileged addresses can call this. NOTE: due to async nature of IBC this feature will be enabled only on the hub.",
      "type": "object",
      "required": [
        "instant_unlock"
      ],
      "properties": {
        "instant_unlock": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cancel unlocking",
      "type": "object",
      "required": [
        "relock"
      ],
      "properties": {
        "relock": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissioned to the Emissions Controller contract. Confirms unlocking for a specific user. Unconfirmed unlocks can't be withdrawn.",
      "type": "object",
      "required": [
        "confirm_unlock"
      ],
      "properties": {
        "confirm_unlock": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissioned to the Emissions Controller contract. Cancel unlocking for a specific user. This is used on IBC failures/timeouts. Allows users to retry unlocking.",
      "type": "object",
      "required": [
        "force_relock"
      ],
      "properties": {
        "force_relock": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw xASTRO from the vxASTRO contract",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set the list of addresses that allowed to instantly unlock xASTRO. Only contract owner can call this. NOTE: due to async nature of IBC this feature will be enabled only on the hub.",
      "type": "object",
      "required": [
        "set_privileged_list"
      ],
      "properties": {
        "set_privileged_list": {
          "type": "object",
          "required": [
            "list"
          ],
          "properties": {
            "list": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the marketing info for the vxASTRO contract",
      "type": "object",
      "required": [
        "update_marketing"
      ],
      "properties": {
        "update_marketing": {
          "type": "object",
          "properties": {
            "description": {
              "description": "A longer description of the token and its utility. Designed for tooltips or such",
              "type": [
                "string",
                "null"
              ]
            },
            "marketing": {
              "description": "The address (if any) that can update this data structure",
              "type": [
                "string",
                "null"
              ]
            },
            "project": {
              "description": "A URL pointing to the project behind this token",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
