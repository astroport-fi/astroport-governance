{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns contract config",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns whether fee is expected for adding tributes",
      "type": "object",
      "required": [
        "is_fee_expected"
      ],
      "properties": {
        "is_fee_expected": {
          "type": "object",
          "required": [
            "asset_info",
            "lp_token"
          ],
          "properties": {
            "asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "lp_token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns vector of tributes for a given LP token.",
      "type": "object",
      "required": [
        "query_pool_tributes"
      ],
      "properties": {
        "query_pool_tributes": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "epoch_ts": {
              "description": "Epoch timestamp. Enough to provide any timestamp within the epoch. If None, it will return the current epoch tributes. NOTE: Tribute epoch matches epoch when rewards started being distributed. It doesn't match the preceding epoch when rewards were added!.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "lp_token": {
              "description": "LP token to query tributes for.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns vector of all tributes for a given epoch. Item value (lp token, tribute asset).",
      "type": "object",
      "required": [
        "query_all_epoch_tributes"
      ],
      "properties": {
        "query_all_epoch_tributes": {
          "type": "object",
          "properties": {
            "epoch_ts": {
              "description": "Epoch timestamp. Enough to provide any timestamp within the epoch. If None, it returns the current epoch tributes. NOTE: Tribute epoch matches epoch when rewards started being distributed. It doesn't match the preceding epoch when rewards were added!.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "limit": {
              "description": "Limits the number of returned results.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "start_after": {
              "description": "Start after is pagination parameter where value is (lp token, reward asset info).",
              "type": [
                "array",
                "null"
              ],
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns vector of claimable tributes for a given address.",
      "type": "object",
      "required": [
        "simulate_claim"
      ],
      "properties": {
        "simulate_claim": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "description": "Address to simulate claim for.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
