{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Permissionless endpoint to add tributes to a given LP token. Caller must pay an anti-spam fee if this reward doesn't exist yet. If such AssetInfo already exists on a given LP token, it will be extended with additional amount. Tribute reward can be either a native token or a CW20 token. The caller must approve CW20 token to pull specified amount. You can add tribute only for upcoming epoch.",
      "type": "object",
      "required": [
        "add_tribute"
      ],
      "properties": {
        "add_tribute": {
          "type": "object",
          "required": [
            "asset",
            "lp_token"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/Asset"
            },
            "lp_token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims all tributes for a caller address. Optional receiver address to send claimed tributes.",
      "type": "object",
      "required": [
        "claim"
      ],
      "properties": {
        "claim": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissioned to a contract owner. Allows removing tribute from a given LP token only for upcoming epoch.",
      "type": "object",
      "required": [
        "remove_tribute"
      ],
      "properties": {
        "remove_tribute": {
          "type": "object",
          "required": [
            "asset_info",
            "lp_token",
            "receiver"
          ],
          "properties": {
            "asset_info": {
              "description": "Asset to remove from tributes.",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            },
            "lp_token": {
              "description": "LP token to remove tribute from.",
              "type": "string"
            },
            "receiver": {
              "description": "Receiver address to send removed tributes.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissioned to a contract owner. Allows claiming all orphaned tributes for a given LP token.",
      "type": "object",
      "required": [
        "claim_orphaned"
      ],
      "properties": {
        "claim_orphaned": {
          "type": "object",
          "required": [
            "epoch_ts",
            "lp_token",
            "receiver"
          ],
          "properties": {
            "epoch_ts": {
              "description": "Epoch timestamp. Enough to provide any timestamp within the epoch.",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lp_token": {
              "description": "LP token to claim orphaned tributes from.",
              "type": "string"
            },
            "receiver": {
              "description": "Receiver address to send claimed tributes.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Permissioned to a contract owner. Allows updating tribute contract configuration.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "rewards_limit": {
              "description": "Maximum number of tributes per pool",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "token_transfer_gas_limit": {
              "description": "Token transfer gas limit",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "tribute_fee_info": {
              "description": "Anti-spam fee for adding tributes",
              "anyOf": [
                {
                  "$ref": "#/definitions/TributeFeeInfo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner proposes a new owner for the contract",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "new_owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The timestamp when the contract ownership change expires",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "new_owner": {
              "description": "Newly proposed contract owner",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the latest contract ownership transfer proposal",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ClaimOwnership allows the newly proposed owner to claim contract ownership",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "TributeFeeInfo": {
      "type": "object",
      "required": [
        "fee",
        "fee_collector"
      ],
      "properties": {
        "fee": {
          "$ref": "#/definitions/Coin"
        },
        "fee_collector": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
