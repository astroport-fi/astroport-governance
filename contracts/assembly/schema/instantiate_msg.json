{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "proposal_effective_delay",
    "proposal_expiration_period",
    "proposal_required_deposit",
    "proposal_required_quorum",
    "proposal_required_threshold",
    "proposal_voting_period",
    "staking_addr",
    "xastro_token_addr"
  ],
  "properties": {
    "proposal_effective_delay": {
      "description": "Proposal effective delay",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_expiration_period": {
      "description": "Proposal expiration period",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_required_deposit": {
      "description": "Proposal required deposit",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "proposal_required_quorum": {
      "description": "Proposal required quorum",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_required_threshold": {
      "description": "Proposal required threshold",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "proposal_voting_period": {
      "description": "Proposal voting period",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "staking_addr": {
      "description": "Address of staking contract",
      "type": "string"
    },
    "xastro_token_addr": {
      "description": "Address of xASTRO token",
      "type": "string"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
