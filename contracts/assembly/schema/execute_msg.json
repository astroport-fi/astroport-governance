{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "title": "Description",
      "description": "Receives a message of type [`Cw20ReceiveMsg`]",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Cast vote for an active propose.",
      "type": "object",
      "required": [
        "cast_vote"
      ],
      "properties": {
        "cast_vote": {
          "type": "object",
          "required": [
            "proposal_id",
            "vote"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "description": "Vote option",
              "allOf": [
                {
                  "$ref": "#/definitions/ProposalVoteOption"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "End proposal.",
      "type": "object",
      "required": [
        "end_proposal"
      ],
      "properties": {
        "end_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Execute proposal messages",
      "type": "object",
      "required": [
        "execute_proposal"
      ],
      "properties": {
        "execute_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Remove completed proposal in the proposal list.",
      "type": "object",
      "required": [
        "remove_completed_proposal"
      ],
      "properties": {
        "remove_completed_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "description": "Proposal identifier",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Update current assembly contract ## Executor Only assembly contract via passed proposal can execute it",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "$ref": "#/definitions/UpdateConfig"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "ProposalVoteOption": {
      "title": "Description",
      "description": "This enum describes available options for voting on the proposal",
      "type": "string",
      "enum": [
        "For",
        "Against"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateConfig": {
      "type": "object",
      "properties": {
        "proposal_effective_delay": {
          "description": "Proposal effective delay",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_expiration_period": {
          "description": "Proposal expiration period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_required_deposit": {
          "description": "Proposal required deposit",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint128",
          "minimum": 0.0
        },
        "proposal_required_quorum": {
          "description": "Proposal required quorum",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_required_threshold": {
          "description": "Proposal required threshold",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "proposal_voting_period": {
          "description": "Proposal voting period",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "xastro_token_addr": {
          "description": "xASTRO token address",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  }
}
